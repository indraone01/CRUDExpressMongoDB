"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = require("assert");
var path_1 = require("path");
var binary = process.__nexe;
assert_1.ok(binary);
var manifest = binary.resources;
var isString = function (x) { return typeof x === 'string' || x instanceof String; };
if (Object.keys(manifest).length) {
    var fs_1 = require('fs');
    var originalReadFile_1 = fs_1.readFile;
    var originalReadFileSync_1 = fs_1.readFileSync;
    var resourceStart_1 = binary.layout.resourceStart;
    var setupManifest_1 = function () {
        var manifest = binary.resources;
        Object.keys(manifest).forEach(function (key) {
            var absolutePath = path_1.resolve(key);
            if (!manifest[absolutePath]) {
                manifest[absolutePath] = manifest[key];
            }
            var normalizedPath = path_1.normalize(key);
            if (!manifest[normalizedPath]) {
                manifest[normalizedPath] = manifest[key];
            }
        });
        setupManifest_1 = function () { };
    };
    //TODO track inflight fs reqs??
    var nfs = {
        readFile: function readFile(file, options, callback) {
            setupManifest_1();
            var entry = manifest[file];
            if (!entry || !isString(file)) {
                return originalReadFile_1.apply(fs_1, arguments);
            }
            var offset = entry[0], length = entry[1];
            var resourceOffset = resourceStart_1 + offset;
            var encoding = isString(options) ? options : null;
            callback = typeof options === 'function' ? options : callback;
            fs_1.open(process.execPath, 'r', function (err, fd) {
                if (err)
                    return callback(err, null);
                fs_1.read(fd, Buffer.alloc(length), 0, length, resourceOffset, function (error, bytesRead, result) {
                    if (error) {
                        return fs_1.close(fd, function () {
                            callback(error, null);
                        });
                    }
                    fs_1.close(fd, function (err) {
                        if (err) {
                            return callback(err, result);
                        }
                        callback(err, encoding ? result.toString(encoding) : result);
                    });
                });
            });
        },
        readFileSync: function readFileSync(file, options) {
            setupManifest_1();
            var entry = manifest[file];
            if (!entry || !isString(file)) {
                return originalReadFileSync_1.apply(fs_1, arguments);
            }
            var offset = entry[0], length = entry[1];
            var resourceOffset = resourceStart_1 + offset;
            var encoding = isString(options) ? options : null;
            var fd = fs_1.openSync(process.execPath, 'r');
            var result = Buffer.alloc(length);
            fs_1.readSync(fd, result, 0, length, resourceOffset);
            fs_1.closeSync(fd);
            return encoding ? result.toString(encoding) : result;
        }
    };
    Object.assign(fs_1, nfs);
}
